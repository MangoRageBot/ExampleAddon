buildscript {
    repositories {
        gradlePluginPortal()
        maven {
            url = "https://maven.minecraftforge.net/"
        }
    }

    dependencies {
        classpath 'gradle.plugin.com.github.johnrengelman:shadow:7.1.2'
        classpath 'org.mangorage:MangoBotGradle:6.0.10'
    }
}

apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'java'
apply plugin: 'MangoBotGradle'
apply plugin: 'maven-publish'

group = 'org.mangorage'
version = '1.0.0'

println("Version: " + version)

// Your runConfigs...
MangoBotConfig {
    setJarTask jar

    addRunConfig {
        it.setName "runDevBot"
        it.addArgs "--dev"
    }
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(22))
    }
}

repositories {
    mavenCentral()
    maven {
        url = "https://maven.minecraftforge.net/"
    }
    maven {
        url 'https://m2.dv8tion.net/releases'
    }
    maven {
        url 'https://jitpack.io'
    }
    maven {
        url "https://maven.lavalink.dev/releases/"
    }
}

dependencies {
    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'

    // Required
    installer('org.mangorage:installer:4.0.15')
    bootstrap("org.mangorage:mangobotbootstrap:1.0.18")

    plugin('org.mangorage:mangobot:12.0.52')

    // Optional
    plugin('org.mangorage:mangobotplugin:12.0.25')

    // library('com.example:example-artifact:version') // Gets put into dependencies.json
    // embedLibrary('com.example:example-artifact:version') // Doesn't get put into dependencies.json
}

test {
    testLogging {
        events "passed", "skipped", "failed"
    }
    useJUnitPlatform()
}

MangoBotConfig {
    setJarTask(jar)
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            mangobot_version: version
    ]
    inputs.properties replaceProperties

    filesMatching(['example.plugin.json']) {
        expand replaceProperties + [project: project]
    }
}

jar {
    dependsOn configurations.embedLibrary

    from {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        configurations.embedLibrary.collect {
            zipTree(it)
        }
    } {
        exclude "META-INF/*.RSA", "META-INF/*.SF", "META-INF/*.DSA"
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    setArchiveClassifier('sources')
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}

publishing {
    publications.register("mangobotaddon", MavenPublication) {
        artifact jar
        artifact sourcesJar
        artifact javadocJar

        pom {
            name = 'MangoBot Example Addon Plugin'
            description = 'The Example Addon Template for MangoBot'
            url = 'https://github.com/MangoRageBot/ExampleAddon'
            issueManagement {
                system = 'github'
                url = 'https://github.com/MangoRageBot/ExampleAddon/issues'
            }
            developers {
                developer {
                    id = 'mangorage'
                    name = 'MangoRage'
                }
            }
            withXml {
                def dependencies = asNode().appendNode('dependencies')
                configurations.library.getDependencies().each {
                    def dependency = dependencies.appendNode('dependency')
                    dependency.appendNode('groupId', it.group)
                    dependency.appendNode('artifactId', it.name)
                    dependency.appendNode('version', it.version)
                }
            }
        }
    }

    repositories {
        maven {
            url = "https://maven.minecraftforge.net/"

            credentials {
                username = System.getenv("MAVEN_USERNAME")
                password = System.getenv("MAVEN_PASSWORD")
            }
        }
    }
}